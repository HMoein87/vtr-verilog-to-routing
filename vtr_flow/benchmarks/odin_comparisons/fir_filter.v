// megafunction wizard: %LPM_MULT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: lpm_mult

// ============================================================
// File Name: lpm_mult0.v
// Megafunction Name(s):
// 			lpm_mult
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 4.1 Build 181 06/29/2004 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2004 Altera Corporation
//Any  megafunction  design,  and related netlist (encrypted  or  decrypted),
//support information,  device programming or simulation file,  and any other
//associated  documentation or information  provided by  Altera  or a partner
//under  Altera's   Megafunction   Partnership   Program  may  be  used  only
//to program  PLD  devices (but not masked  PLD  devices) from  Altera.   Any
//other  use  of such  megafunction  design,  netlist,  support  information,
//device programming or simulation file,  or any other  related documentation
//or information  is prohibited  for  any  other purpose,  including, but not
//limited to  modification,  reverse engineering,  de-compiling, or use  with
//any other  silicon devices,  unless such use is  explicitly  licensed under
//a separate agreement with  Altera  or a megafunction partner.  Title to the
//intellectual property,  including patents,  copyrights,  trademarks,  trade
//secrets,  or maskworks,  embodied in any such megafunction design, netlist,
//support  information,  device programming or simulation file,  or any other
//related documentation or information provided by  Altera  or a megafunction
//partner, remains with Altera, the megafunction partner, or their respective
//licensors. No other licenses, including any licenses needed under any third
//party's intellectual property, are provided herein.


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module lpm_mult0 (
	dataa,
	datab,
	clock,
	result);

	input	[7:0]  dataa;
	input	[7:0]  datab;
	input	  clock;
	output reg	[15:0]  result;
	reg[15:0] pipeline1;
	reg[15:0] pipeline2;

	always @(posedge clock)
	begin
	    result = pipeline2;
	    pipeline2 = pipeline1;
	    pipeline1 = dataa * datab;
	end

	/*lpm_mult	lpm_mult_component (
				.dataa (dataa),
				.datab (datab),
				.clock (clock),
				.result (sub_wire0),
				.clken (1'b1),
				.sum (1'b0),
				.aclr (1'b0));
	defparam
		lpm_mult_component.lpm_widtha = 8,
		lpm_mult_component.lpm_widthb = 8,
		lpm_mult_component.lpm_widthp = 16,
		lpm_mult_component.lpm_widths = 1,
		lpm_mult_component.lpm_type = "LPM_MULT",
		lpm_mult_component.lpm_representation = "UNSIGNED",
		lpm_mult_component.lpm_hint = "DEDICATED_MULTIPLIER_CIRCUITRY=YES,MAXIMIZE_SPEED=5",
		lpm_mult_component.lpm_pipeline = 3;*/


endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: WidthA NUMERIC "8"
// Retrieval info: PRIVATE: WidthB NUMERIC "8"
// Retrieval info: PRIVATE: WidthS NUMERIC "1"
// Retrieval info: PRIVATE: WidthP NUMERIC "16"
// Retrieval info: PRIVATE: OptionalSum NUMERIC "0"
// Retrieval info: PRIVATE: AutoSizeResult NUMERIC "1"
// Retrieval info: PRIVATE: B_isConstant NUMERIC "0"
// Retrieval info: PRIVATE: SignedMult NUMERIC "0"
// Retrieval info: PRIVATE: ConstantB NUMERIC "0"
// Retrieval info: PRIVATE: ValidConstant NUMERIC "0"
// Retrieval info: PRIVATE: Latency NUMERIC "1"
// Retrieval info: PRIVATE: aclr NUMERIC "0"
// Retrieval info: PRIVATE: clken NUMERIC "0"
// Retrieval info: PRIVATE: LPM_PIPELINE NUMERIC "3"
// Retrieval info: PRIVATE: optimize NUMERIC "0"
// Retrieval info: CONSTANT: LPM_WIDTHA NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHB NUMERIC "8"
// Retrieval info: CONSTANT: LPM_WIDTHP NUMERIC "16"
// Retrieval info: CONSTANT: LPM_WIDTHS NUMERIC "1"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_MULT"
// Retrieval info: CONSTANT: LPM_REPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "DEDICATED_MULTIPLIER_CIRCUITRY=YES,MAXIMIZE_SPEED=5"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "3"
// Retrieval info: USED_PORT: dataa 0 0 8 0 INPUT NODEFVAL dataa[7..0]
// Retrieval info: USED_PORT: result 0 0 16 0 OUTPUT NODEFVAL result[15..0]
// Retrieval info: USED_PORT: datab 0 0 8 0 INPUT NODEFVAL datab[7..0]
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL clock
// Retrieval info: CONNECT: @dataa 0 0 8 0 dataa 0 0 8 0
// Retrieval info: CONNECT: result 0 0 16 0 @result 0 0 16 0
// Retrieval info: CONNECT: @datab 0 0 8 0 datab 0 0 8 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0_waveforms.html TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL lpm_mult0_wave*.jpg FALSE
//Fir_Filter Behavioral Model
//Jonathan Allen
//ECE 659 HW#1
module fir_filter(
	clk,
	reset,
	data_in,
	data_out,
	coef_in,
	load_c
);
//Input Ports
input clk;
input reset;
input [7:0] data_in;
input [7:0] coef_in;
input load_c;

//Output Ports
output [17:0] data_out;

//Data Type Declarations for IO
wire clk;
wire reset;
wire [7:0] data_in;
wire [7:0] coef_in;
wire load_c;

reg [17:0] data_out;

//Other Declarations
reg [7:0] r_storage [24:0];
reg [7:0] r_storage0;
reg [7:0] r_storage1;
reg [7:0] r_storage2;
reg [7:0] r_storage3;
reg [7:0] r_storage4;
reg [7:0] r_storage5;
reg [7:0] r_storage6;
reg [7:0] r_storage7;
reg [7:0] r_storage8;
reg [7:0] r_storage9;
reg [7:0] r_storage10;
reg [7:0] r_storage11;
reg [7:0] r_storage12;
reg [7:0] r_storage13;
reg [7:0] r_storage14;
reg [7:0] r_storage15;
reg [7:0] r_storage16;
reg [7:0] r_storage17;
reg [7:0] r_storage18;
reg [7:0] r_storage19;
reg [7:0] r_storage20;
reg [7:0] r_storage21;
reg [7:0] r_storage22;
reg [7:0] r_storage23;
reg [7:0] r_storage24;
reg [7:0] coef_storage0;
reg [7:0] coef_storage1;
reg [7:0] coef_storage2;
reg [7:0] coef_storage3;
reg [7:0] coef_storage4;
reg [7:0] coef_storage5;
reg [7:0] coef_storage6;
reg [7:0] coef_storage7;
reg [7:0] coef_storage8;
reg [7:0] coef_storage9;
reg [7:0] coef_storage10;
reg [7:0] coef_storage11;
reg [7:0] coef_storage12;
reg [7:0] coef_storage13;
reg [7:0] coef_storage14;
reg [7:0] coef_storage15;
reg [7:0] coef_storage16;
reg [7:0] coef_storage17;
reg [7:0] coef_storage18;
reg [7:0] coef_storage19;
reg [7:0] coef_storage20;
reg [7:0] coef_storage21;
reg [7:0] coef_storage22;
reg [7:0] coef_storage23;
reg [7:0] coef_storage24;
reg[31:0] i;
reg [15:0] product_array [24:0];

lpm_mult0 m0(r_storage0,coef_storage0,clk,product_array[0]);
lpm_mult0 m1(r_storage1,coef_storage1,clk,product_array[1]);
lpm_mult0 m2(r_storage2,coef_storage2,clk,product_array[2]);
lpm_mult0 m3(r_storage3,coef_storage3,clk,product_array[3]);
lpm_mult0 m4(r_storage4,coef_storage4,clk,product_array[4]);
lpm_mult0 m5(r_storage5,coef_storage5,clk,product_array[5]);
lpm_mult0 m6(r_storage6,coef_storage6,clk,product_array[6]);
lpm_mult0 m7(r_storage7,coef_storage7,clk,product_array[7]);
lpm_mult0 m8(r_storage8,coef_storage8,clk,product_array[8]);
lpm_mult0 m9(r_storage9,coef_storage9,clk,product_array[9]);
lpm_mult0 m10(r_storage10,coef_storage10,clk,product_array[10]);
lpm_mult0 m11(r_storage11,coef_storage11,clk,product_array[11]);
lpm_mult0 m12(r_storage12,coef_storage12,clk,product_array[12]);
lpm_mult0 m13(r_storage13,coef_storage13,clk,product_array[13]);
lpm_mult0 m14(r_storage14,coef_storage14,clk,product_array[14]);
lpm_mult0 m15(r_storage15,coef_storage15,clk,product_array[15]);
lpm_mult0 m16(r_storage16,coef_storage16,clk,product_array[16]);
lpm_mult0 m17(r_storage17,coef_storage17,clk,product_array[17]);
lpm_mult0 m18(r_storage18,coef_storage18,clk,product_array[18]);
lpm_mult0 m19(r_storage19,coef_storage19,clk,product_array[19]);
lpm_mult0 m20(r_storage20,coef_storage20,clk,product_array[20]);
lpm_mult0 m21(r_storage21,coef_storage21,clk,product_array[21]);
lpm_mult0 m22(r_storage22,coef_storage22,clk,product_array[22]);
lpm_mult0 m23(r_storage23,coef_storage23,clk,product_array[23]);
lpm_mult0 m24(r_storage24,coef_storage24,clk,product_array[24]);

//par_add0 parallel_add(product_array[0],product_array[1],product_array[2],product_array[3],data_out);


//Code starts here
always @ (posedge clk)
begin

	if(reset==1'b1)begin		//reset
        r_storage24 <= 8'b00000000;
        r_storage23 <= 8'b00000000;
        r_storage22 <= 8'b00000000;
        r_storage21 <= 8'b00000000;
        r_storage20 <= 8'b00000000;
        r_storage19 <= 8'b00000000;
        r_storage18 <= 8'b00000000;
        r_storage17 <= 8'b00000000;
        r_storage16 <= 8'b00000000;
        r_storage15 <= 8'b00000000;
        r_storage14 <= 8'b00000000;
        r_storage13 <= 8'b00000000;
        r_storage12 <= 8'b00000000;
        r_storage11 <= 8'b00000000;
        r_storage10 <= 8'b00000000;
        r_storage9 <= 8'b00000000;
        r_storage8 <= 8'b00000000;
        r_storage7 <= 8'b00000000;
        r_storage6 <= 8'b00000000;
        r_storage5 <= 8'b00000000;
        r_storage4 <= 8'b00000000;
        r_storage3 <= 8'b00000000;
        r_storage2 <= 8'b00000000;
        r_storage1 <= 8'b00000000;
        coef_storage24 <= 8'b00000000;
        coef_storage23 <= 8'b00000000;
        coef_storage22 <= 8'b00000000;
        coef_storage21 <= 8'b00000000;
        coef_storage20 <= 8'b00000000;
        coef_storage19 <= 8'b00000000;
        coef_storage18 <= 8'b00000000;
        coef_storage17 <= 8'b00000000;
        coef_storage16 <= 8'b00000000;
        coef_storage15 <= 8'b00000000;
        coef_storage14 <= 8'b00000000;
        coef_storage13 <= 8'b00000000;
        coef_storage12 <= 8'b00000000;
        coef_storage11 <= 8'b00000000;
        coef_storage10 <= 8'b00000000;
        coef_storage9 <= 8'b00000000;
        coef_storage8 <= 8'b00000000;
        coef_storage7 <= 8'b00000000;
        coef_storage6 <= 8'b00000000;
        coef_storage5 <= 8'b00000000;
        coef_storage4 <= 8'b00000000;
        coef_storage3 <= 8'b00000000;
        coef_storage2 <= 8'b00000000;
        coef_storage1 <= 8'b00000000;
	end
	else if(load_c==1'b1)begin	//load coeficients
		coef_storage24 = coef_storage23;
		coef_storage23 = coef_storage22;
		coef_storage22 = coef_storage21;
		coef_storage21 = coef_storage20;
		coef_storage20 = coef_storage19;
		coef_storage19 = coef_storage18;
		coef_storage18 = coef_storage17;
		coef_storage17 = coef_storage16;
		coef_storage16 = coef_storage15;
		coef_storage15 = coef_storage14;
		coef_storage14 = coef_storage13;
		coef_storage13 = coef_storage12;
		coef_storage12 = coef_storage11;
		coef_storage11 = coef_storage10;
		coef_storage10 = coef_storage9;
		coef_storage9 = coef_storage8;
		coef_storage8 = coef_storage7;
		coef_storage7 = coef_storage6;
		coef_storage6 = coef_storage5;
		coef_storage5 = coef_storage4;
		coef_storage4 = coef_storage3;
		coef_storage3 = coef_storage2;
		coef_storage2 = coef_storage1;
		coef_storage1 = coef_storage0;
		coef_storage0 = coef_in;
	end
	else begin
        r_storage24 = r_storage23;
        r_storage23 = r_storage22;
        r_storage22 = r_storage21;
        r_storage21 = r_storage20;
        r_storage20 = r_storage19;
        r_storage19 = r_storage18;
        r_storage18 = r_storage17;
        r_storage17 = r_storage16;
        r_storage16 = r_storage15;
        r_storage15 = r_storage14;
        r_storage14 = r_storage13;
        r_storage13 = r_storage12;
        r_storage12 = r_storage11;
        r_storage11 = r_storage10;
        r_storage10 = r_storage9;
        r_storage9 = r_storage8;
        r_storage8 = r_storage7;
        r_storage7 = r_storage6;
        r_storage6 = r_storage5;
        r_storage5 = r_storage4;
        r_storage4 = r_storage3;
        r_storage3 = r_storage2;
        r_storage2 = r_storage1;
        r_storage1 = r_storage0;
        r_storage0 = data_in;
		data_out=product_array[0]+
                 		     product_array[1]+
                 		     product_array[2]+
                 		     product_array[3]+
                 		     product_array[4]+
                 		     product_array[5]+
                 		     product_array[6]+
                 		     product_array[7]+
                 		     product_array[8]+
                 		     product_array[9]+
                 		     product_array[10]+
                 		     product_array[11]+
                 		     product_array[12]+
                 		     product_array[13]+
                 		     product_array[14]+
                 		     product_array[15]+
                 		     product_array[16]+
                 		     product_array[17]+
                 		     product_array[18]+
                 		     product_array[19]+
                 		     product_array[20]+
                 		     product_array[21]+
                 		     product_array[22]+
                 		     product_array[23];
	end
end
endmodule